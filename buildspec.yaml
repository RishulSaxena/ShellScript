
version: 0.2
env:
  shell: bash
  secrets-manager:
    ANYPOINT_CLIENT_ID:  "mulesoft/anypoint_platform/credentials:org.client_id"
    ANYPOINT_CLIENT_SECRET:  "mulesoft/anypoint_platform/credentials:org.client_secret"
    ANYPOINT_ORG:  "mulesoft/anypoint_platform/credentials:organization"
phases:
  install:
    runtime-versions:
      nodejs: 14
    commands:
    
      # Extract Anypoint connection properties from global variables
      - export ANYPOINT_CLIENT_ID=$ANYPOINT_CLIENT_ID
      - export ANYPOINT_CLIENT_SECRET=$ANYPOINT_CLIENT_SECRET
      - export ANYPOINT_ORG=$ANYPOINT_ORG
      - export ANYPOINT_ENV=$DEPLOY_ENVIRONMENT
      
      # Check previous deployment using cache
      - touch ~/last-deploy-$ANYPOINT_ENV-SHA
      - LAST_DEPLOY_SHA=`cat ~/last-deploy-$ANYPOINT_ENV-SHA`
      - echo -e "Version to deploy - $SOURCE_SHA\nLast deployed - $LAST_DEPLOY_SHA"  
      
      # Install new or load anypoint-cli from cache
      - |
        if [ ! -d "/usr/local/lib/node_modules/anypoint-cli" ]; then
          export PUPPETEER_SKIP_DOWNLOAD='true'
          mkdir -p /usr/local/lib/node_modules
          npm install --prefix /usr/local -g anypoint-cli@latest
        else
          echo anypoint-cli already installed
        fi
      - |
        if [ ! -f "/usr/local/bin/anypoint-cli" ]; then
          mkdir -p /usr/local/bin
          ln -s /usr/local/lib/node_modules/anypoint-cli/src/app.js /usr/local/bin/anypoint-cli
          echo Linked node executable
        fi
      - PATH=/usr/local/bin:$PATH
      
      # Extract and store environment specific properties
      - export AP_MANAGER_CLIENT_ID=$(aws secretsmanager get-secret-value --secret-id mulesoft/anypoint_platform/credentials --query 'SecretString' --output text | jq -r '.["'${ANYPOINT_ENV,,}'.ap_manager.client_id"]')
      - export AP_MANAGER_CLIENT_SECRET=$(aws secretsmanager get-secret-value --secret-id mulesoft/anypoint_platform/credentials --query 'SecretString' --output text | jq -r '.["'${ANYPOINT_ENV,,}'.ap_manager.client_secret"]')
      - export MULE_APPLICATION_NAME="${PROJECT_NAME}-${ANYPOINT_ENV,,}"
      
      # Extract and store environment encryption key for app deployment
      - export MULE_ENCRYPTION_KEY=$(aws secretsmanager get-secret-value --secret-id mulesoft/anypoint_platform/credentials --query 'SecretString' --output text | jq -r '.["'${ANYPOINT_ENV,,}'.mule.encryption.key"]')
      - APIMANAGER_SPEC_INPUT="apimanager_spec.json"
         
  pre_build:
   commands:
    # Validate the presence of required parameters
    - if [ "$ASSETID" == null ] || [ "$ASSETVERSION" == null ]; then echo "Required Parameters missing in App Information. Input File contents $APIMANAGER_SPEC";exit 1; fi
    
    # Check if asset is present in Anypoint Exchange
    - echo Input file Processed. Checking Asset existence ... 
    - |
      anypoint-cli exchange asset describe $ASSETID/$ASSETVERSION > asset-status
      FOUND=$?
      ASSET_STATUS=`cat asset-status | grep ^Status`
      echo $ASSET_STATUS
      echo $FOUND
      if [[ "$FOUND" != 0 ]]; then echo Asset not found in Exchange; exit 1; fi
    - echo Found Asset with id $ASSETID with $ASSET_STATUS
    

    # 1. @..... Show List OF VPC And DLB ....@

     - |
      if [[ "$INSTANCELABEL" != null ]]; then 
        ASSETLISTDATA=$(anypoint-cli-v4 cloudhub:vpc:list);
        ASSETLISTDATA1=$(anypoint-cli-v4 cloudhub:load-balancer:list);
        ASSETLISTDATA2=$(anypoint-cli-v4 cloudhub:region:list);
      else
        ASSETLISTDATA=$(anypoint-cli-v4 cloudhub:vpc:list) 
      fi
      STATUS=$?
      if [[ "$STATUS" != 0 ]]; then echo "Error getting Asset List\nError-$ASSETLISTDATA"; exit 1; fi

    # # 2. @..... Create VPC ....@
    #    - |
    #   if [[ "$INSTANCELABEL" != null ]]; then 
    #     ASSETLISTDATA=$(anypoint-cli-v4 cloudhub vpc create "vpc-tce-nonprod-useast-2-mulesoft-2" "useast-2" "192.168.189.0/24" "dev");
    #   else
    #     ASSETLISTDATA=$(anypoint-cli-v4 cloudhub vpc create "vpc-tce-nonprod-useast-2-mulesoft-2" "useast-2" "192.168.189.0/24" "dev") 
    #   fi
    #   STATUS=$?
    #   if [[ "$STATUS" != 0 ]]; then echo "Error getting Asset List\nError-$ASSETLISTDATA"; exit 1; fi

         
    # # 3. @..... Create Delete DLB Add Mappings Rule ....@
    # - |
    #   if [[ "$INSTANCELABEL" != null ]]; then 
    #     ASSETLISTDATA=$(cloudhub:load-balancer:create [flags] "vpc-tce-nonprod-useast-2-mulesoft-2" "dlb-tce-nonprod-useast-2" "/Users/mule/Documents/cert.pem" "<privateKey>");
    #   else
    #     ASSETLISTDATA=$(cloudhub:load-balancer:create [flags] "vpc-tce-nonprod-useast-2-mulesoft-2" "dlb-tce-nonprod-useast-2" "/Users/mule/Documents/cert.pem" "<privateKey>") 
    #   fi
    #   STATUS=$?
    #   if [[ "$STATUS" != 0 ]]; then echo "Error getting Asset List\nError-$ASSETLISTDATA"; exit 1; fi
      
    # # Derive the deployment mode(deploy or modify) by querying for current deployment status in cloudhub
    # - |
    #   anypoint-cli runtime-mgr cloudhub-application describe $MULE_APPLICATION_NAME > cloudhub-status
    #   FOUND=$?
    #   DEPLOYMENT_STATUS=`cat cloudhub-status | grep ^Status`
    #   if [[ "$FOUND" == 0 ]]; then
    #     DEPLOY_CMD="modify"
    #   else
    #     DEPLOY_CMD="deploy"
    #   fi
    # - echo Project initated for $DEPLOY_CMD...
  